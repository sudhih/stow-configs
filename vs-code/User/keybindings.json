// place your key bindings in this file to override the defaults
[
    // Toggle Activity Bar visibility
    {
        "key": "C-b",
        "when": "editorTextFocus",
        "args": {
            "id": "toggleSidebar",
            "value": [
                {
                    "workbench.action.toggleSidebarVisibility": true
                },
                {
                    "workbench.action.toggleSidebarVisibility": false
                },
            ]
        }
    },

    // Outline expand and collapse
    // TODO: fix me,
    // // expand is not working, only collapse works.
    // {
    //     "key": "+",
    //     "when": "focusedView == outline && vim.mode == 'Normal'",
    //     "command": "outline.expand"
    // },
    // {
    //     "key": "-",
    //     "when": "focusedView == outline && vim.mode == 'Normal'",
    //     "command": "outline.collapse"
    // },

    // Cycle through my preferred colorschemes
    {
        "key": "ctrl+shift+t",
        "command": "settings.cycle.colorTheme",
    },
    
    // Scroll Up & Down using Ctrl+n and Ctrl+p
    //1. Code action menu
    {
        "key": "Ctrl+n",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "Ctrl+p",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    }, 

    // 2. Command Pallete
    {
        "key": "Ctrl+p",
        "command": "quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "Ctrl+n",
        "command": "quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    
    // Remove default Ctrl+n behaviour, b'se we're using 
    // Ctrl+n to move to next item generally.
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },

    
    // 3. Breakcrumb {
    {
        "key": "ctrl+h",
        "command": "breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+l",
        "command": "breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+n",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+p",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+h",
        "command": "list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus &&  !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+l",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus &&  !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
    },
    // 3. Breadcrumb }
    
    // 4. Panel {

    // 4.1 toggle maximize/minimize Panel irrespective of the tab within the  Panel
    {
        "key": "ctrl+m",
        "when": "panelFocus",
        "command": "workbench.action.toggleMaximizedPanel"

    },

    // 4.2 easily switch tabs inside Panel
    {
        "key": "ctrl+1",
        "when": "panelFocus && workbench.panel.markers.view.active",
        "command": "workbench.actions.view.problems"

    },    {
        "key": "ctrl+2",
        "when": "panelFocus && workbench.panel.output.active",
        "command": "workbench.action.output.toggleOutput"

    },
    {
        "key": "ctrl+3",
        "when": "panelFocus && workbench.panel.repl.view.active",
        "command": "workbench.debug.action.toggleRepl"

    },
    {
        "key": "ctrl+4",
        "when": "panelFocus && terminal.active",
        "command": "workbench.action.terminal.toggleTerminal"
    },

    // 4.3 Open new terminal & split terminal
    {
        "key": "ctrl+t",
        "when": "terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.split"
    },
    {
        "key": "ctrl+n",
        "when": "terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.new"
    },
    // 4. Panel }

]